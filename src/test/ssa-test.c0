#use <conio>
/*
 * An interface to self-sorting arrays
 *
 * 15-122 Principles of Imperative Computation
 */

#use <util>
#use <string>

/************************************************************************/
/************************* BEGIN IMPLEMENTATION *************************/

// Implementation-side type
struct ssa_header {
  string[] data;  // sorted
  int length;     // = \length(data)
};
typedef struct ssa_header ssa;

// Internal debugging function that prints an SSA without checking contracts
// (useful to debug representation invariant issues)
void ssa_print_unsafe(ssa* A)
{
  int len = A->length;
  printf("SSA length=%d; data=[", len);
  for (int i = 0; i < len; i++)
  //@loop_invariant 0 <= i && i <= len;
  {
    printf("%s", A->data[i]);
    if (i < len-1) printf(", ");
  }
  printf("]");
}


// Auxiliary functions
void swap(string[] D, int i, int j)
//@requires 0 <= i && i < \length(D);
//@requires 0 <= j && j < \length(D);
{
  string tmp = D[i];
  D[i] = D[j];
  D[j] = tmp;
}

bool is_array_expected_length(string[] A, int length) {
  //@assert \length(A) == length;
  return true;
}

bool is_sorted(ssa* A)
//@requires A != NULL && is_array_expected_length(A->data, A->length);
{
  for (int i=0; i < A->length - 1; i++)
    //@loop_invariant 0 <= i;
    if (string_compare(A->data[i], A->data[i+1]) > 0) return false;
  return true;
}

// Representation invariant
bool is_ssa(ssa* A) {
  return A != NULL
      && is_array_expected_length(A->data, A->length)
      && is_sorted(A);
}

// Internal debugging function that prints an SSA
// (useful to spot bugs that do not invalidate the representation invariant)
void ssa_print_internal(ssa* A)
//@requires is_ssa(A);
{
  ssa_print_unsafe(A);
}

// Implementation of exported functions
int ssa_len(ssa* A)
//@requires is_ssa(A);
//@ensures \result >= 0;
//@ensures \result == \length(A->data);
{
  return A->length;
}

string ssa_get(ssa* A, int i)
//@requires is_ssa(A);
//@requires 0 <= i && i < ssa_len(A);
{
  return A->data[i];
}

void ssa_set(ssa* A, int i, string x)
//@requires is_ssa(A);
//@requires 0 <= i && i < ssa_len(A);
//@ensures is_ssa(A);
{
  A->data[i] = x;

  // Move x up the array if needed
  for (int j=i; j < A->length-1 && string_compare(A->data[j],A->data[j+1]) > 0; j++)
    //@loop_invariant i <= j;
    swap(A->data, j, j+1);

  // Move x down the array if needed
  for (int j=i; j > 0 && string_compare(A->data[j],A->data[j-1]) < 0; j--)
    //@loop_invariant 0 <= j && j <= i;
    swap(A->data, j, j-1);
}

ssa* ssa_new(int size)
//@requires 0 <= size;
//@ensures is_ssa(\result);
//@ensures ssa_len(\result) == size;
{
  ssa* A = alloc(ssa);
  A->data = alloc_array(string, size);
  A->length = size;
  return A;
}

// Client-facing print function (does not reveal implementation details)
void ssa_print(ssa* A)
//@requires is_ssa(A);
{
  int len = A->length;
  printf("SSA: [");
  for (int i = 0; i < len; i++)
  //@loop_invariant 0 <= i && i <= len;
  {
    printf("%s", A->data[i]);
    if (i < len-1) printf(", ");
  }
  printf("]");
}

// Client type
typedef ssa* ssa_t;

/************************** END IMPLEMENTATION **************************/
/************************************************************************/

/************************************************************************/
/******************************* Interface ******************************/

// typedef ______* ssa_t;

int ssa_len(ssa_t A)
/*@requires A != NULL;   @*/
/*@ensures \result >= 0; @*/ ;

ssa_t ssa_new(int size)
/*@requires 0 <= size;               @*/
/*@ensures \result != NULL;          @*/
/*@ensures ssa_len(\result) == size; @*/ ;

string ssa_get(ssa_t A, int i)
/*@requires A != NULL;                @*/
/*@requires 0 <= i && i < ssa_len(A); @*/ ;

void ssa_set(ssa_t A, int i, string x)
/*@requires A != NULL;                @*/
/*@requires 0 <= i && i < ssa_len(A); @*/ ;

// Bonus function
void ssa_print(ssa_t A)
/*@requires A != NULL;                @*/ ;


// Client function that prints an SSA
void display_this_ssa(ssa_t A)
/*@requires A != NULL; @*/
{
  printf("\n");
  for (int j = 0; j < ssa_len(A); j++)
  //@loop_invariant 0 <= j;
    {
      printf("%d => %s\n", j, ssa_get(A, j));
    }
}


int main () {

  ssa_t A = ssa_new(3);
  ssa_set(A, 0, "hello");
  display_this_ssa(A);
  ssa_set(A, 1, "world");
  display_this_ssa(A);
  // ssa_set(A, 2, "new");
  // display_this_ssa(A);
  // ssa_print_internal(A);   // violating the interface for effect
  // printf("\n");            //   YOU SHOULD NEVER VIOLATE THE INTERFACE
  // ssa_print(A);            // do this instead or use display_this_ssa
  // printf("\n");

  // ssa_t B = ssa_new(3);
  // ssa_set(B, 0, "hello");
  // display_this_ssa(B);
  // ssa_set(B, 0, "world");
  // display_this_ssa(B);
  // ssa_set(B, 0, "new");
  // display_this_ssa(B);
  // ssa_print(B);
  // printf("\n");

  printf("All tests passed!\n");
  return 0;
}
