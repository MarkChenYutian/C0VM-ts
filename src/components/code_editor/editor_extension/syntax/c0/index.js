import { LRParser } from '@lezer/lr';
import { LRLanguage, foldNodeProp, foldInside, indentNodeProp, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,typedef:22, struct:28, requires:64, true:248, false:250, NULL:82, alloc:88, alloc_array:92, ensures:146, assert:182, if:186, else:190, for:194, loop_invariant:202, while:206, return:210};
const parser = LRParser.deserialize({
  version: 14,
  states: "HnQ]QPOOOkQPO'#C`OOQO'#Ek'#EkQ]QPOOOOQO'#Ce'#CeOOQO'#Ci'#CiOpQQO'#ChO!RQPO'#ChO!WQPO'#CdO!`QQO'#CsOOQO'#El'#ElQ`QPOOO!hQSO,58zOOQO-E8i-E8iOOQO'#Em'#EmO!mQQO,59SO!mQQO,59SO#OQPO'#ChO#gQPO,59OO!WQPO'#CvO#oQPO,59_O#tQPO,59cOOQO-E8j-E8jO#yQPO1G.fOOQO-E8k-E8kO$OQQO1G.nO$aQPO,59SO$aQPO,59SO${QPO1G.jO%^QPO1G.jO%cQPO'#EoO%hQPO,59bOOQO1G.y1G.yO%sQPO1G.}OOQO7+$Q7+$QO&OQPO1G.nO%sQPO7+$UOOQO7+$U7+$UO&jQPO,5;ZOOQO-E8m-E8mOOQO1G.|1G.|O&oQPO'#CpO&tQPO'#CoO&|QPO7+$iO'RQPO<<GpOOQO1G0u1G0uOOQO,59[,59[O!WQPO'#EnO'WQPO,59ZO'`QPO<<HTO'nQPOAN=[OOQO,5;Y,5;YOOQO-E8l-E8lO'sQPO'#CyO'sQPO'#CyOOQO'#Ep'#EpO'{QPOAN=oO)kQPO'#DxOOQOAN=oAN=oOOQOAN?bAN?bOOQOG22vG22vOOQO'#C{'#C{O)rQPO,59eOOQO'#Dv'#DvO)rQPO,5:aO)rQPO,59eO)rQPO,5:aOOQO-E8n-E8nOOQOG23ZG23ZOOQOG24|G24|O,WQWO'#ChOOQO'#Eq'#EqO-ZQPO'#C}OOQO'#DS'#DSOOQO'#DU'#DUOOQO'#DX'#DXOOQO'#DZ'#DZOOQO'#DP'#DPO.vQQO'#DPO!WQPO'#DPO/pQPO'#DPO/uQPO'#DPO)rQPO'#DPO/zQQO'#DyO0RQPO'#EXO0RQPO'#EXOOQO'#E['#E[OOQO'#E`'#E`OOQO'#Ef'#EfOOQO'#Eh'#EhO0WQPO'#DyOOQO'#Dy'#DyO0`QPO'#DyO0eQPO'#DyO0jQPO'#DyO)rQPO'#DyOOQO'#Et'#EtO0oQPO,5:dOOQO,5:d,5:dO2WQQO1G/PO0vQQO1G/PO2_QQO'#C}O4YQQO1G/{O2xQQO1G/{O5qQQO1G/PO4aQQO1G/PO7YQQO1G/{O5xQQO1G/{O7aQPO'#EmOOQO'#Er'#ErO7kQPO'#ErO7pQQO,59iOOQO-E8o-E8oO7pQQO,59iO:cQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,59kO)rQPO,5:eO:jQPO,5:eO:oQPO,59kO!WQPO,59kO!WQPO,59kO:tQQO,59kOOQO,59k,59kOOQO,5:e,5:eOOQO'#EY'#EYO)rQPO,5:sO)rQPO,5:sO<kQPO'#C}O=PQPO,5:eO)rQPO,5:eO(ZQPO,5:eO)rQPO,5:eO>iQQO,5:eO=XQQO,5:eOOQO-E8r-E8rOOQO1G0O1G0OOOQO7+$k7+$kO)rQPO'#DOOOQO7+%g7+%gO>pQPO7+$kO>uQPO7+%gO@[QQO,59jO>zQQO,59jOOQO,5;^,5;^OOQO-E8p-E8pO@wQQO1G/TODmQQO'#DWOCYQQO'#DWODtQPO1G/VOFmQQO1G/VOOQO1G/V1G/VOFtQQO1G/VOHlQQO1G/VOHsQQO1G/VOHvQQO1G/VOJqQQO1G/VOH}QQO1G/VOLlQQO1G/VOJxQQO1G/VONgQQO1G/VOLsQQO1G/VO!!bQQO1G/VONnQQO1G/VO!$]QQO1G/VO!!iQQO1G/VO!&WQQO1G/VO!$dQQO1G/VO!(RQQO1G/VO!&_QQO1G/VO!)|QQO1G/VO!(YQQO1G/VO!+wQQO1G/VO!*TQQO1G/VO!-rQQO1G/VO!,OQQO1G/VO!/mQQO1G/VO!-yQQO1G/VO!1hQQO1G/VO!/tQQO1G/VO!3cQQO1G/VO!1oQQO1G/VO!5^QQO1G/VO!3jQQO1G/VO!7XQQO1G/VO!5eQQO1G/VO!8pQQO1G/VO!7`QQO1G/VO!:XQQO1G0PO!8wQQO1G0POOQO1G0P1G0PO)rQPO1G/VO!:`QPO1G/VO!;uQQO1G0_O!:eQQO1G0_O!=^QQO1G0_O!;|QQO1G0_O!=eQPO,59iO!=eQPO,59iO)rQPO1G0PO!?ZQQO1G0PO!=yQQO1G0PO)rQPO1G0PO!@rQQO1G0PO!?bQQO1G0POOQO<<HV<<HVOOQO<<IR<<IROOQO1G/U1G/UO)rQPO'#EsO!@yQPO,59rOOQO7+$q7+$qO)rQPO7+$qOOQO7+%k7+%kO!ARQQO7+$qO)rQPO7+$qOOQO7+%y7+%yO!BxQPO7+%yO@cQPO1G/TO!D_QQO7+%kO!B}QQO7+%kO!DfQPO7+%kO!E{QQO7+%kO!DkQQO7+%kO!FSQPO7+%kO!GrQQO,5;_O!F_QQO,5;_OOQO-E8q-E8qO!ImQQO<<H]O!GyQQO<<H]O!ItQQO'#DPO!KUQQO<<H]OOQO<<Ie<<IeOOQO<<IV<<IVO!K]QPO<<IVO!LsQPO<<IVO!L}QPO'#EcO!L}QPO'#EcOOQO'#Ev'#EvO!FSQPO<<IVOOQOAN=wAN=wOOQO'#E^'#E^O!MSQPOAN>qO!M[QPOAN>qO!NrQQO'#EbO# oQQO'#EbO0WQPO'#EbO# |QPOAN>qOOQO'#Ed'#EdO)rQPO,5:}O)rQPO,5:}OOQO-E8t-E8tOOQOAN>qAN>qO#!RQPO,5;aOOQOG24]G24]O!MSQPOG24]OOQO-E8s-E8sO)rQPO,5:|OOQO,5:|,5:|O#!WQPO,5:|O!FSQPOG24]O#!`QQO1G0iO#!gQQO1G0iO#!nQQO1G0iO#!uQQO1G0iO)rQPO1G0{OOQOLD)wLD)wP!MVQPO'#EuO#!|QQO1G0hO##TQQO1G0hO)rQPO1G0hO!FSQPOLD)wOOQO7+&T7+&TO##[QPO7+&TO##aQQO7+&gO##hQQO7+&gO##oQQO7+&SO##vQQO7+&SOOQO!$'Mc!$'McOOQO<<Io<<IoO!DfQPO<<JROOQOAN?mAN?mO##}QPO'#ChO#$SQPO,59SO#$SQPO,59SO#$bQPO1G.nO#$pQPO'#C}O#$xQPO'#Ch",
  stateData: "#$}~O#mOSPOSQOS~OTPOYUOZSO^TO~O#o[O~O_^O`^Oa^Oi[Xl[X~OY`O~OYaO^TO~OicOleO~OUgO~O_^O`^Oa^Oi[al[a~O_^O`^Oa^OY[X^[Xf[Xe[X~OYlO^TO~OVpO~ObqO~O#nrO~O_^O`^Oa^Oi[il[i~O_^O`^Oa^OY[a^[aV[af[ae[a~O_^O`^Oa^ObtOV[X~OVuO~OYvO~OYaO^TOhxO~OYaO^TOfcP~O_^O`^Oa^OY[i^[iV[if[ie[i~OV}O~OY!OO~Oe!POfcX~Of!RO~Of!SO~Oe!POfca~OV!]Oi!ZOn!VO!h!WO~OV!^O~Op!_O!k!aO~OV!gOi!ZOn!VO!h!WO~OY!hO^TOa!iOb!qOn!vOt!oOu!oOw!oOy!lO|!mO!O!nO!P!tO!Q!tO!h!wO#P!xO#T!yO#Z!zO#]!{O#p!kO#q!kO~Oh#UO~P(ZOY#XOa!iOb!qOt!oOu!oOw!oOy!lO|!mO!O!nO!P!tO!Q!tO#p!kO#q!kO~O!f#bO!g#bObqX!RqX!SqX!TqX!UqX!VqX!WqX!XqX!YqX!ZqX![qX!]qX!^qX!_qX!`qX!aqX!bqX!cqX!dqX!yqX!zqX~O_#`O`^OY[Xa[X!nqX!oqX!pqX!qqX!rqX!sqX!tqX!uqX!vqX!wqX!xqX~P*mOY#eOa!iO~Oa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO!y#{O!z#{O~Ob#fO!n#zO!o#zO!p#zO!q#zO!r#zO!s#zO!t#zO!u#zO!v#zO!w#zO!x#zO~P-cOb#}O~Ob$OO~OV$RO~P-cO!}$SO~OY$VOa!iO~Ob$XO~Ob$YO~Ob$ZO~Oh$_O~P(ZOV$`Oa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P0vO_$aOVqXaqX`qXeqXfqX!eqX~P*mOV$bOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P2xOV$cOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P4aOV$dOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P5xO_#aX`#aX~P)rOY$gO~O_$aO!f#bO!g#bOaqabqa!Rqa!Sqa!Tqa!Uqa!Vqa!Wqa!Xqa!Yqa!Zqa![qa!]qa!^qa!_qa!`qa!aqa!bqa!cqa!dqa!nqa!oqa!pqa!qqa!rqa!sqa!tqa!uqa!vqa!wqa!xqa!yqa!zqaVqa`qaeqafqa!eqa~OfzP~P)rOV%gO~Of%hO~Ob#fOVsaasa!Rsa!Ssa!Tsa!Usa!Vsa!Wsa!Xsa!Ysa!Zsa![sa!]sa!^sa!_sa!`sa!asa!bsa!csa!dsa!ysa!zsa`saesafsa!esa~O_$aO!f#bO!g#bOVqX!nqXfqX~OV%gO!n%pO~OV%gOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P=XO!h%vO~O!h%wO~O`%xOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P>zO_$aO!f#bO!g#bO!nqiVqifqi~Oaqibqi!Rqi!Sqi!Tqi!Uqi!Vqi!Wqi!Xqi!Yqi!Zqi![qi!]qi!^qi!_qi!`qi!aqi!bqi!cqi!dqi!oqi!pqi!qqi!rqi!sqi!tqi!uqi!vqi!wqi!xqi!yqi!zqi`qieqi!eqi~P@cOa#gOe%yO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yOfzX~Ob#fO~PCYOf%{O~Ob#fOVsi!Rsi!Ssi!Tsi!Usi!Vsi!Wsi!Xsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Oasi~PDyOa#gO~PDyOa#gOVsi!Ssi!Tsi!Usi!Vsi!Wsi!Xsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~O!Rsi~PF{Ob#fO!R#hO~PF{Oa#gO!R#hO!S#iOVsi!Tsi!Usi!Vsi!Wsi!Xsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~PH}Oa#gO!R#hO!S#iO!T#jOVsi!Usi!Vsi!Wsi!Xsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~PJxOa#gO!R#hO!S#iO!T#jO!U#kOVsi!Vsi!Wsi!Xsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~PLsOa#gO!R#hO!S#iO!T#jO!U#kO!V#lOVsi!Wsi!Xsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~PNnOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mOVsi!Xsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!!iOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nOVsi!Ysi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!$dOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oOVsi!Zsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!&_Oa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pOVsi![si!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!(YOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qOVsi!]si!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!*TOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rOVsi!^si!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!,OOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sOVsi!_si!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!-yOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tOVsi!`si!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!/tOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uOVsi!asi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!1oOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vOVsi!bsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!3jOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wOVsi!csi!dsi!ysi!zsi`siesifsi!esi~Ob#fO~P!5eOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO!e%|O~Ob#fO~P!7`OV%}Oa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P!8wOe&PO~OV&QOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P!:eOV&ROa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P!;|O_$aO!f#bO!g#bOVqa!nqafqa~Oa#gOf&VO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P!=yOa#gOf&YO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P!?bOe%yOfza~Ob#fOVsqasq!Rsq!Ssq!Tsq!Usq!Vsq!Wsq!Xsq!Ysq!Zsq![sq!]sq!^sq!_sq!`sq!asq!bsq!csq!dsq!ysq!zsq`sqesqfsq!esq~O!h&bO~OV&cOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P!B}Oi!ZO~OV&eOa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Ob#fO~P!DkOi!ZOn&fO!h&gO~Oa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yOe#gaf#ga~Ob#fO~P!F_Oa#gO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yOVsy!ysy!zsy`syesyfsy!esy~Ob#fO~P!GyOa#gOb#fO!R#hO!S#iO!T#jO!U#kO!V#lO!W#mO!X#nO!Y#oO!Z#pO![#qO!]#rO!^#sO!_#tO!`#uO!a#vO!b#wO!c#xO!d#yO~Of&jO~P0yO#R&kOY!my^!mya!myb!myh!myn!myt!myu!myw!myy!my|!my!O!my!P!my!Q!my!h!my#P!my#T!my#Z!my#]!my#p!my#q!my~OY!hO^TO~P)uO#X&rO~Oi!ZO#P!xO~O#R&kOY!m!R^!m!Ra!m!Rb!m!Rh!m!Rn!m!Rt!m!Ru!m!Rw!m!Ry!m!R|!m!R!O!m!R!P!m!R!Q!m!R!h!m!R#P!m!R#T!m!R#Z!m!R#]!m!R#p!m!R#q!m!R~O!n&{O!o&{O!p&{O!q&{O!r&{O!s&{O!t&{O!u&{O!v&{O!w&{O!x&{O!y&|O!z&|O~P!ItO!y&|O!z&|Of#UX~P0yOf'OO~Ob'TO~O!n'YOf#Ua~OV'[O~P!ItOV'[O~P0yOV']O~P!ItOV']O~P0yOf#Ui~P!ItOf#Ui~P0yO!h'cO~Of'dO~P!ItOf'dO~P0yOf#Uq~P!ItOf#Uq~P0yOYkO~O_^O`^OY[aa[a~O_^O`^OY[ia[i~OY%nOa!iO~OY'hO~O",
  goto: "5W#kPPPP#lPPP#p#uPP#z$qPPPPP%Y%`PP#pPP%g#pP%jP%nP%t(z)VPP,VP,VP-Z-^P.bPPPPPPPPPPPPPPPPPPPPPPPPP%j/fP/l0YPPPPPPPPPPPPP0a0fP0lP0vP0|P1R1U1[P1bP1gP#p1l1r1y2f2l2r2x4U4i4p4v4|TQORVYORZVWORZUXORZQbWQmbSncoUyqt!PU!|!Z#T$YQ#|!qQ$l#}Q%i$OR&p&eUVORZd'fWbcoqt!P!q#}$OX'k!Z#T$Y&eQ{qR|tSzqtR!T!PRdXT!X!R!YQ!`!VR!c!WU!p!Z#T$YQ#V!`Q#Y!bQ#[!cQ#^!dQ$P!tQ$W!|Q$[#RS$e#`$aQ$j#fQ$m#gQ$o#hQ$q#iQ$s#jQ$u#kQ$w#lQ$y#mQ${#nQ$}#oQ%P#pQ%R#qQ%T#rQ%V#sQ%X#tQ%Z#uQ%]#vQ%_#wQ%a#xQ%c#yQ%e#zQ%j$TQ%l$UQ%q$XQ%t$ZQ&O%hQ&T%pQ&W%sQ&Z%yQ&^%|Q&`&PQ&n&eQ&}&pQ'P&sQ'R&tQ'W&{Q'^'TR'`'Yc#a!h#X#c#e$V$i%n%o&SU!u!Z#T$YQ#W!`Q#Z!bQ#]!cQ#_!dQ$Q!tQ$]#RS$f#`$aQ$k#fQ$n#gQ$p#hQ$r#iQ$t#jQ$v#kQ$x#lQ$z#mQ$|#nQ%O#oQ%Q#pQ%S#qQ%U#rQ%W#sQ%Y#tQ%[#uQ%^#vQ%`#wQ%b#xQ%d#yQ%f#zQ%k$TQ%m$UQ%r$XQ%u$ZQ%{%hQ&U%pQ&X%sQ&[%yQ&_%|Q&a&PQ&o&eQ'Q&sQ'S&tQ'X&{Q'_'TR'a'Y#T!o!Z!`!b!c!d!t#R#T#`#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z$T$U$X$Y$Z$a%h%p%s%y%|&P&e&s&t&{'T'YR$l#f#T!r!Z!`!b!c!d!t#R#T#`#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z$T$U$X$Y$Z$a%h%p%s%y%|&P&e&s&t&{'T'Y#T!s!Z!`!b!c!d!t#R#T#`#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z$T$U$X$Y$Z$a%h%p%s%y%|&P&e&s&t&{'T'YQ!b!VR!d!WQ![!RQ!f!YQ&c&YQ&d&VQ&v&iQ&x&lS'U&y'OQ'b'ZR'e'dS#S!Z#TR%s$YV!}!Z#T$YQ$T!vR$U!wU#O!Z#T$YV&w&l&y'VQ&l&dR&y&mV#P!Z#T$YR&q&eX&h&Y&i'O'ZQ&s&fR&t&gV#Q!Z#T$YV#R!Z#T$YQROR]RSZORRfZQ_U[h_ijs'g'iQi`SjalQskQ'g!hR'i'hQ!QzR!U!QQocRwoQ!Y!RR!e!Y#S!j!Z!`!b!c!d!t#R#T#`#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z$T$U$X$Y$Z$a%h%p%s%y%|&P&e&s&t&{'T'YS#d!j'jT'j!|&pS#c!h#XW$h#c$i%o&SQ$i#eQ%o$VR&S%nS%z$j$kR&]%zQ#T!ZR$^#TQ&m&dR&z&mQ&i&YS&u&i'ZR'Z'O",
  nodeNames: "⚠ Comment CommentBlock Program LibraryImport Import LibraryName ; TypeDefinition Keyword Identifier typedef Type Keyword struct [ ] Mul ( CommaSep Parameter , ) StructDefinition } { StructScope Function FunctionName Contract ContractLine Keyword requires Variable ArrayIndex Value String Number Boolean Char Keyword NULL CommaSep Keyword alloc Keyword alloc_array LogNot BitNot Div Mod Add Min Lsh Rsh Lt Le Gt Ge LogEq LogNeq BitAnd BitXor BitOr LogAnd LogOr CondQ CondS Field Offset ContractBlock Contract Keyword ensures Scope Expression = AddEq MinEq MulEq DivEq ModEq AndEq XorEq NegEq LshEq RshEq Incr Decr Contract Keyword assert Keyword if Keyword else Keyword for SimpleExp Contract Keyword loop_invariant Keyword while Keyword return FuncDeclaration",
  maxTerm: 125,
  nodeProps: [
    ["closedBy", 15,"]",25,"}"],
    ["openedBy", 16,"[",24,"{"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 12,
  tokenData: "/m~RuXY#fYZ#f]^#fpq#fqr#wrs$Ust$guv%Ovw%]wx%rxy&oyz&tz{&y{|'W|}'m}!O'r!O!P(a!P!Q(f!Q!R*p!R![+g![!]+o!]!^+t!^!_+y!_!`,j!`!a,w!a!b-h!b!c-m!c!}-y!}#O.`#P#Q.e#Q#R.j#R#S-y#T#o-y#o#p.w#p#q.|#q#r/Z#r#s/`~#kS#m~XY#fYZ#f]^#fpq#fZ#|P!PP!_!`$PY$UO!^Y~$XROr$Urs$bs~$U~$gOt~~$jP#i#j$m~$pP#g#h$s~$vP#X#Y$y~%OOT~~%TP!S~!_!`%W~%]O!s~~%bQ!_~vw%h!_!`%m~%mO!b~~%rO!t~~%uRP#O&O#O#P&Z#P~&O~&RPwx&U~&ZOw~~&^RPw&Owx&gx~&O~&lPw~wx&U~&tOb~~&yOf~~'OPa~!_!`'R~'WO!q~~']Q!T~{|'c!_!`'h~'hO!y~~'mO!o~~'rOe~~'wR!U~}!O(Q!_!`(V!`!a([~(VO!z~~([O!p~~(aO!f~~(fO!g~~(kR!R~z{(t!P!Q)}!_!`*k~(wRO!b)Q!b!c)x!c~)Q~)TSOz)Qz{)a{!P)Q!Q~)Q~)dTOz)Qz{)a{!P)Q!P!Q)s!Q~)Q~)xOQ~~)}O!h~~*QRO!b*Z!b!c*f!c~*Z~*`QP~OY*ZZ~*Z~*kOn~~*pO!r~~*uQu~!z!{*{#l#m*{~+OR!Q![+X!c!i+X#T#Z+X~+^Ru~!Q![+X!c!i+X#T#Z+X~+lPu~!Q![+g~+tO!e~~+yOV~Z,QQ#oP!XY!^!_,W!_!`,eY,]P!VY!_!`,`Y,eO!wYY,jO!YY~,oP!n~!_!`,r~,wO!]~Z-OQ#nP!ZY!_!`-U!`!a-ZY-ZO![YY-`P!WY!_!`-cY-hO!xY~-mO!d~~-pPz{-s~-vP!P!Q)x_.SSlQYXUS!Q![-y!c!}-y#R#S-y#T#o-y~.eO_~~.jO`~~.oP!`~!_!`.r~.wO!u~~.|Oi~~/RP!a~#p#q/U~/ZO!c~~/`Oh~Z/eP!QP!_!`/hY/mO!vY",
  tokenizers: [0, 1, 2, 3],
  topRules: {"Program":[0,3]},
  specialized: [{term: 10, get: value => spec_Identifier[value] || -1}],
  tokenPrec: 0
});

const C0Language = LRLanguage.define({
    parser: parser.configure({
        props: [
            foldNodeProp.add({
                Scope: foldInside,
                StructScope: foldInside,
                CommentBlock: foldInside,
            }),
            indentNodeProp.add({
                Scope: context => context.baseIndent + context.unit,
                StructScope: context => context.baseIndent + context.unit
            }),
            styleTags({
                "Type/...": tags.typeName,
                "StructScope/Identifier": tags.attributeName,
                "FunctionName/...": tags.name,
                "Parameter/Identifier": tags.variableName,
                Boolean: tags.bool,
                String: tags.string,
                Number: tags.number,
                Char: tags.character,
                Comment: tags.lineComment,
                CommentBlock: tags.blockComment,
                "return": tags.controlKeyword,
                "if": tags.controlKeyword,
                "else": tags.controlKeyword,
                "while": tags.controlKeyword,
                "for": tags.controlKeyword,
                "LibraryImport/...": tags.moduleKeyword,
                "alloc": tags.keyword,
                "alloc_array": tags.keyword,
                "assert": tags.keyword,
                "typedef": tags.keyword,
                "loop_invariant": tags.keyword,
                "requires": tags.keyword,
                "ensures": tags.keyword,
                "NULL": tags.null,
                ContractBlock: tags.annotation,
                ContractLine: tags.annotation,
                "(": tags.paren,
                ")": tags.paren,
                Add: tags.arithmeticOperator,
                Min: tags.arithmeticOperator,
                Mul: tags.arithmeticOperator,
                Div: tags.arithmeticOperator,
                Mod: tags.arithmeticOperator,
                AddEq: tags.arithmeticOperator,
                MinEq: tags.arithmeticOperator,
                MulEq: tags.arithmeticOperator,
                DivEq: tags.arithmeticOperator,
                ModEq: tags.arithmeticOperator,
                Incr: tags.arithmeticOperator,
                Decr: tags.arithmeticOperator,
                BitNot: tags.bitwiseOperator,
                BitXor: tags.bitwiseOperator,
                BitOr: tags.bitwiseOperator,
                BitAnd: tags.bitwiseOperator,
                Lsh: tags.bitwiseOperator,
                Rsh: tags.bitwiseOperator,
                LogNot: tags.logicOperator,
                LogAnd: tags.logicOperator,
                LogOr: tags.logicOperator,
                LogEq: tags.logicOperator,
                LogNeq: tags.logicOperator,
                Ge: tags.compareOperator,
                Le: tags.compareOperator,
                Gt: tags.compareOperator,
                Lt: tags.compareOperator,
                Field: tags.derefOperator,
            }),
        ]
    })
});
function C0() {
    return new LanguageSupport(C0Language);
}

export { C0, C0Language };
