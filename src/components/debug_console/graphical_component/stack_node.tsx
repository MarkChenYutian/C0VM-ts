import React from "react";

import * as TypeUtil from "../../../utility/c0_type_utility";

import { NodeProps, Handle, Position } from "reactflow";
import { calculate_entry_height, is_valid_var } from "./graphical_utility";
import { Type2String } from "../../../utility/c0_type_utility";
import { c0_value_cvt2_js_string } from "../../../utility/c0_value_utility";
import { loadString } from "../../../utility/string_utility";
import { isNullPtr } from "../../../utility/pointer_utility";
import { stackSrcHandleID } from "./graph_builder";
import { read_funcPtr } from "../../../utility/func_ptr_utility";
import { remove_tag } from "../../../utility/tag_ptr_utility";



export default class C0StackFrameNode extends React.Component<NodeProps<C0StackFrameNodeData>> {
    render(): JSX.Element {
        const data = this.props.data;

        const contents: JSX.Element[] = [];
        const handles: JSX.Element[] = [];

        let valid_cnt = 0;

        contents.push(<p className="dbg-func-name" key="func-name">{data.frame.P.name} &nbsp;
                      {data.isActive ? <span className="active-frame">Active Frame</span> : null}</p>)
        
        for (let i = 0; i < data.frame.V.length; i ++) {
            /* Update on version 1.2.0 
             * If the variable name is _result, _caller or <Anonymous>, do not render this variable
             * as it is generated by cc0 when compiling with dynamic contract check (-d) flag
             */
            const var_name = data.frame.V_Name[i];
            if (!is_valid_var(var_name)) {
                continue;
            }
            
            const to_be_rendered = data.frame.V[i];
            if (to_be_rendered !== undefined && data.frame.V_Name[i] !== undefined) {
                contents.push(<p key={"s-val-name-" + i} className="right-aligned"><code>{Type2String(to_be_rendered.type, data.typedef)} {data.frame.V_Name[i]}</code></p>);
                let render_content = undefined;
                let tag_element    = null;

                if (TypeUtil.isValueType(to_be_rendered)) {
                    render_content = c0_value_cvt2_js_string(to_be_rendered);
                } else if (TypeUtil.isStringType(to_be_rendered)) {
                    render_content = `"${loadString(to_be_rendered, data.mem)}"`;
                } else if (TypeUtil.isPointerType(to_be_rendered)) {
                    render_content = isNullPtr(to_be_rendered.value) ? "NULL" : " ";
                } else if (TypeUtil.isTagPointerType(to_be_rendered)) {
                    render_content = isNullPtr(to_be_rendered.value) ? "NULL" : " ";
                    if (!isNullPtr(to_be_rendered.value)) {
                        const real_ptr = remove_tag(to_be_rendered, this.props.data.mem, this.props.data.state.TagRecord);
                        tag_element = <code className="tag">{Type2String(real_ptr.type, this.props.data.typedef)}</code>;
                    }
                } else if (TypeUtil.isFuncPointerType(to_be_rendered)) {
                    const [idx, native] = read_funcPtr(to_be_rendered);
                    const nativeDisplay = native ? "native" : "static";
                    const functionName  = native ? this.props.data.state.P.nativePool[idx].functionType
                                                    : this.props.data.state.P.functionPool[idx].name;
                    render_content = isNullPtr(to_be_rendered.value) ? "NULL" : `&${functionName}, ${nativeDisplay}`;
                } else {
                    render_content = "Unknown value";
                }
                contents.push(
                    <div key={"s-val-wrap-" + i}>
                        <p key={"s-val-value-" + i} className="dbg-frame-content">{render_content} {tag_element}</p>
                        {
                            (TypeUtil.isPointerType(to_be_rendered) || TypeUtil.isTagPointerType(to_be_rendered)) && !isNullPtr(to_be_rendered.value)?
                            <Handle type="source" key={"s-val-ptr-" + i} id={stackSrcHandleID(i)} position={Position.Right} style={{ top: calculate_entry_height(valid_cnt, "frame"), right: "2rem" }}/>
                            : null
                        }
                    </div>
                )
                valid_cnt ++;
            }
        }

        if (contents.length === 1) {
            contents.push(<p key="s-val-value-0" style={{gridColumnStart: 1, gridColumnEnd: 3}}>No Variable in this function</p>)
        }

        return (
        <>
            <div className="dbg-node-base dbg-stack-node">
                {contents}
                {handles}
            </div>
        </>);
    }
}
